## GAP script to iterate over groups of order n and subsets X closed under conjugation by H = <X>, with lazy evaluation of zeta^* assignments

# Generator: yields one zeta^* assignment at a time
ZetaGenerator := function(domainList, codomainList)
    local len, indices, done, Next;
    len := Length(domainList);
    if len = 0 then
        return rec(done := false, next := function() local v; v := []; return v; end);
    fi;
    indices := List([1..len], i -> 1);
    done := false;
    Next := function()
        local current, i;
        if done then return fail; fi;
        current := List([1..len], i -> codomainList[indices[i]]);
        # Advance indices
        i := len;
        while i >= 1 do
            indices[i] := indices[i] + 1;
            if indices[i] <= Length(codomainList) then
                break;
            else
                indices[i] := 1;
                i := i - 1;
            fi;
        od;
        if i = 0 then done := true; fi;
        return current;
    end;
    return rec(next := Next);
end;

# Main routine: find symmetric subquandles of Conj G for nonabelian groups G of order n
symmConjSubs := function(n)
    local grpList, G, elemsG, allSubs, x, X, H, gensH, orbits, ZH, zetaGen, mapChoice, zetaValues, rhoValues, ok, j, mapping, orbitIdx, k, idx, localCount, globalCount;

    PrintTo (Concatenation(GLR.path, "symm-conj-subqs-order-", String(n), ".txt"), "List of symmetric subquandles of Conj G for nonabelian groups G of order ", n, "\n \n");
	globalCount := 0;
	grpList := AllSmallGroups(n);
    for G in grpList do
		if IsAbelian(G) then continue; fi;
		localCount := 0;
        elemsG := Elements(G);
        allSubs := Combinations(elemsG);
        for X in allSubs do
            H := Subgroup(G, X);
            gensH := GeneratorsOfGroup(H);
            if ForAll(X, x -> ForAll(gensH, h -> x^h in X)) then
				# compute X/H and Z(H)
                orbits := OrbitsDomain(H, X, OnPoints);
                ZH := Elements(Centre(H));
                if Length(orbits) = 0 or Length(ZH) = 0 then
                    continue;
                fi;
                mapping := List(X, x -> 0);
                for orbitIdx in [1..Length(orbits)] do
                    for x in orbits[orbitIdx] do
                        idx := Position(X, x);
                        if idx <> fail then
                            mapping[idx] := orbitIdx;
                        fi;
                    od;
                od;
				# construct functions zeta^*: X/H -> Z(H)
                zetaGen := ZetaGenerator(orbits, ZH);
                while true do
                    mapChoice := zetaGen.next();
                    if mapChoice = fail then
                        break;
                    fi;
                    zetaValues := [];
                    rhoValues := [];
                    for j in [1..Length(X)] do
                        orbitIdx := mapping[j];
                        zetaValues[j] := mapChoice[orbitIdx];
                        rhoValues[j] := zetaValues[j]^-1 * X[j]^-1;
                    od;
					# test whether zeta meets the conditions for inducing a good involution
                    ok := true;
                    for j in [1..Length(X)] do
                        if not rhoValues[j] in X then
                            ok := false;
                            break;
                        fi;
                        k := Position(X, rhoValues[j]);
                        if zetaValues[k] <> zetaValues[j] then
                            ok := false;
                            break;
                        fi;
                    od;
					# if we found a good involution, then print what it is
                    if ok then
                        localCount := localCount + 1;
						AppendTo (Concatenation(GLR.path, "symm-conj-subqs-order-", String(n), ".txt"),"G = ", StructureDescription(G), "\n",
							"X = ", X, "\n", "rho: \n");
                        for j in [1..Length(X)] do
                            AppendTo(Concatenation(GLR.path, "symm-conj-subqs-order-", String(n), ".txt"),X[j], " -> ", rhoValues[j], "\n");
                        od;
						AppendTo(Concatenation(GLR.path, "symm-conj-subqs-order-", String(n), ".txt"),"\n");
                    fi;
                od;
            fi;
        od;
		AppendTo(Concatenation(GLR.path, "symm-conj-subqs-order-", String(n), ".txt"), "Rough upper bound on the number of good involutions of Conj X: ", Size(ZH)^Size(orbits),"\n");
		AppendTo(Concatenation(GLR.path, "symm-conj-subqs-order-", String(n), ".txt"),"Actual number of symmetric subquandles of Conj X: ", localCount, "\n\n");
		globalCount := globalCount + localCount;
    od;
	AppendTo(Concatenation(GLR.path, "symm-conj-subqs-order-", String(n), ".txt"),"Number of symmetric subquandles of groups of order ", n, ": ", globalCount);
end;