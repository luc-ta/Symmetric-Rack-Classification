## GAP script to iterate over groups of order n and subsets X closed under conjugation by H = <X>, with lazy evaluation of alpha^* assignments

# action of Inn(Core G) on G
coreAction := function(x,g)
	return g*(x^-1)*g;
end;

# Generator: yields one alpha^* assignment at a time
AlphaGenerator := function(domainList, codomainList)
    local len, indices, done, Next;
    len := Length(domainList);
    if len = 0 then
        return rec(done := false, next := function() local v; v := []; return v; end);
    fi;
    indices := List([1..len], i -> 1);
    done := false;
    Next := function()
        local current, i;
        if done then return fail; fi;
        current := List([1..len], i -> codomainList[indices[i]]);
        # Advance indices
        i := len;
        while i >= 1 do
            indices[i] := indices[i] + 1;
            if indices[i] <= Length(codomainList) then
                break;
            else
                indices[i] := 1;
                i := i - 1;
            fi;
        od;
        if i = 0 then done := true; fi;
        return current;
    end;
    return rec(next := Next);
end;

# Main routine: find good involutions of Core G for groups G of order n such that Core G is nontrivial
symmCore := function(n)
    local grpList, G, x, X, id, orbits, ZG, A, alphaGen, mapChoice, alphaValues, rhoValues, ok, j, mapping, orbitIdx, k, idx, localCount, globalCount;

    PrintTo (Concatenation(GLR.path, "symm-core-quandles-order-", String(n), ".txt"), "List of good involutions of nontrivial core quandles Core G for groups G of order ", n, "\n \n");
	globalCount := 0;
	grpList := AllSmallGroups(n);
    for G in grpList do
        X := Elements(G);
		id := X[1];
		# if G is an elementary abelian 2-group, then Core G is trivial
		if ForAll(X, g -> g^2 = id) then continue; fi;
		localCount := 0;
		# compute G/(Inn Core G) and A
		orbits := OrbitsDomain(G, X, coreAction);
		# central elements of G
		ZG := Elements(Centre(G));
		A := Filtered(ZG, g -> g^2 = id);
		mapping := List(X, x -> 0);
		for orbitIdx in [1..Length(orbits)] do
			for x in orbits[orbitIdx] do
				idx := Position(X, x);
				if idx <> fail then mapping[idx] := orbitIdx; fi;
            od;
        od;
		# construct functions alpha^*: G/(Inn Core G) -> A
		alphaGen := AlphaGenerator(orbits, A);
		while true do
			mapChoice := alphaGen.next();
			if mapChoice = fail then break; fi;
			alphaValues := [];
			rhoValues := [];
			for j in [1..Length(X)] do
				orbitIdx := mapping[j];
				alphaValues[j] := mapChoice[orbitIdx];
				rhoValues[j] := alphaValues[j] * X[j];
			od;
			# test whether alpha meets the conditions for inducing a good involution
			ok := true;
			for j in [1..Length(X)] do
				k := Position(X, rhoValues[j]);
				if alphaValues[k] <> alphaValues[j] then
					ok := false;
					break;
				fi;
			od;
			# if we found a good involution, then print what it is
			if ok then
				localCount := localCount + 1;
				AppendTo (Concatenation(GLR.path, "symm-core-quandles-order-", String(n), ".txt"),"G = ", StructureDescription(G), "\n",
					"X = ", X, "\n", "rho: \n");
				for j in [1..Length(X)] do
					AppendTo(Concatenation(GLR.path, "symm-core-quandles-order-", String(n), ".txt"),X[j], " -> ", rhoValues[j], "\n");
				od;
				AppendTo(Concatenation(GLR.path, "symm-core-quandles-order-", String(n), ".txt"),"\n");
			fi;
        od;
		AppendTo(Concatenation(GLR.path, "symm-core-quandles-order-", String(n), ".txt"),"Rough upper bound on the number of good involutions of Core G: ", Size(A)^Size(orbits),"\n");
		AppendTo(Concatenation(GLR.path, "symm-core-quandles-order-", String(n), ".txt"),"Actual number of good involutions of Core ", StructureDescription(G), ": ", localCount, "\n\n");
		globalCount := globalCount + localCount;
    od;
	AppendTo(Concatenation(GLR.path, "symm-core-quandles-order-", String(n), ".txt"),"Number of good involutions of core quandles of order ", n, ": ", globalCount);
end;